byte 
word 
double-word 
quad-word 

cpu
	registers
peripheral
data-bus

machine-instruction
instruction-pointer
	esp 

get-instruction 
execute-instruction

fast-speed cache

logic-gate
	add 
	or 
	xor 
	del 
flags-registers 

80386
IA-32 intel 
x86-64 amd/intel

operating-system 
bios

memory-model 
	real-mode-flat-model 
	protected-mode-flat-model 
--------------------------------
8080
	cpu-bit  8
	address-line 16
	address-range 64k
8086
	cpu-bit 16
	address-line 20
	address-range 1M
	----------------------
	segment 
		segment-boundary
		code-segment-registers
		segment-range
			64k
		----------------------
		segment-address 
		segment-inner-offset --> 20 address 
		----------------------
		segment-registers 
			CS
				code-segment 
			DS
				data-segment 
			SS
				stack-segment 
			ES
				extend-segment 
			FS
			GS
		----------------------
		common-registers
			16-bits 
				AX, BX, CX, DX, BP, SI, DI, SP
			32-bits 
				EAX, EBX, ECX, EDX, EBP, ESI, EDI, ESP 
		half-register 
			8-bits 
				AL, AH 
				BL, BH
				CL, CH 
				DL, DH 
		instruction-pointer-register 
			16-bits 
				IP 
			32-bits 
				EIP
		----------------------
		real-mode-flat-model 
				cs + ip --> instruction-address 
		protected-mode-flat-model 
				cs: modified by OS  
				ip: not allowed read or write 
		----------------------
		flag-register 
			FLAGS 
			EFLAGS 
----------------------------------
assembly-programme-model 
	real-mode-flat-model 
		64 k 
		--------------
		stack 
		....
		no-used memory 
		....
		programme-data 
		programme-code 
		programme-prefix 
		--------------- 
	--------------- 
	real-mode-segment-model 
		1 M
		--------------- 
		stack-segment 
		data-segment 
		code-segment 
		operating-system 
		---------------
	--------------- 
	protected-mode-flag-model 
		cpu: 386
		OS: window nt / linux 
		common-registers  32-bits 
		address-space 4GB
		----------------
		stack 
		programme-code 
		operating-system 
		----------------
----------------------------------
bless: binary-file editor 
----------------------------------
byte-order 
	little-endian
	big-endian 
----------------------------------
assembly-language
	move ebp, esp; save the stack pointer in ebp 
	助记符　操作数　注释
	------------------------------
	.asm --> .o --> elf-exec 

	assembler 
	linker 
	-----------------------------
	re-locate ability
		8080
			programme is loaded in specific address 
		8086
			symbol-reference is relative-offset 
			re-locatable 

-----------------------------
nasm
	 -f 
		output-file format 
		
	 -g
		cause debug info 
	 -F 
	-------------------------------	
	nasm -f elf -g -F stabs eatsyscall.asm
----------------------------------
ld
	-o 
		outfile-name
----------------------------------
gdb
----------------------------------
kdbg: front-end of gdb 
ddd:
	IDE 
insight: 
	IDE 
----------------------------------
kwrite
kate
	IDE
konsole
----------------------------------
mov dst, src 
	<register, const>
	<register, register>
	<register, memory>
	<memory, const>
	<memory, register>

add dst, src 
xchg dst, src 
shr 
div
----------------------------------
立即数
    0ah
寄存器数
    al
    ax
    eax
内存数据
	[effective-address]
		register  
		register + const 
		register1 + register2 + const 
----------------------------------
memory-mov-size 
	memory --> register 
		determined by register-size 
		-----------------------
		mov eax, [EatMsg]
	register --> memory 
		determined by register-size or specific-const-size   
		-----------------------
		mov [EatMsg], eax 
		mov [EatMsg] byte 'G'
			BYTE
			WORD
			DWORD
----------------------------------
EFlags-register 
	OF
		进位标记
	DF	
		字符串指令，内存操作顺序
	IF
		中断使能标记
	SF
		运算为负数
	ZF
		运算为０
	AF
		BCD码运算进位
	PF
		奇偶标志
	CF
		无符号运算进位
----------------------------------
inc register 
dec register 
----------------------------------
jnz label
jmp
----------------------------------
signed and unsigned 
	取决于用户怎么理解
----------------------------------
neg register/memory
	m/r8
	m/r16
	m/r32
----------------------------------
movsx dst, src 
	<r16, r/m8>
	<r32, r/m8>
	<r32, r/m16>
----------------------------------
mul r/m8	
	al		ax  
mul r/m16	
	ax		dx and ax 
mul r/m32	
	eax		edx and eax 

CF flag
----------------------------------
div r/m8 
	al ah 
div r/m16 
	ax dx 
div r/m32 
	eax edx 
----------------------------------
assist-mark 
	r8/16/32
	m8/16/32
	i8/16/32
		const 
	d8/16/32
		
	sr 
		cs/ds/ss/es/fs/gs
----------------------------------
equ 
	StringLen: equ $-MyString
	like macro-defines 
----------------------------------
push param 
	r16/32
	m16/32
pushf 
	flags16
pushfd 
	eflags32 
pusha 
	r16 * 16 
pushad 
	r32 * 8
----------------------------------
pop param 
	r16/32
	m16/32
popf
popfd
popa 
popha
----------------------------------
stack 
	used for temporary storage 
	used for call system-call 
----------------------------------
.data 
	init-data 
	store in elf-exec 
	-----------------------
	MyByte db 07h
	MyWord dw 0ffffh
	MyDouble dd 0ffffffffh

	MyString: db 'hello', 10 
	MyString: db "hello", 10 
	
	StringLen: equ $-MyString
----------------------------------
.bss 
	uninit-data 
	not store in elf-exec 

.text 
	code 

label 
	label: mov eax, 10
	jmp label 
----------------------------------
GDB command 
	b _start 
	nexti/ni 
	
	info ingisters 
	print $eax 
	
	display /i $pc  

	set disassembly-flavor intel 
	show disassembly-flavor 
	
	x/20b address 

	disassemble  
----------------------------------
bit-logic 
	and	
		and dst, src 
	or 
		or dst, src  
	not 
		not dst 
	xor
		xor dst, src 
		xor eax, eax 
	shift 
		shl/shr
			shl/shr R/M, i/cl
		rol/ror 
			rol/ror R/M, i/cl 
		rcl/rcr 
			rcl/rcr R/M, i/cl
		-------------------
	CF 
		carry-flag 
		----------
		stc 
			set flag 
		clc 
			clear flag 

